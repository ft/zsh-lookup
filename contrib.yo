
texinode(World Wide Web Services)(ZLE Functions)(Prompt Themes)(User Contributions)
sect(World Wide Web Services for Zsh)
cindex(world wide web services)

Loading this subsystem enables the user to access useful webservices
(such as tt(google), tt(gmane), tt(wikipedia) and many more) via the
command line.

In order to load and initialize the system, you need a issue the following
command:

example(autoload -Uz lookupinit && lookupinit)

After that, a function called tt(lookup) is available. Its basic syntax
is as follows:

example(lookup [GLOBAL-OPTION+LPAR()s+RPAR()...] <backend> OPTION+LPAR()s+RPAR()...)

tt(<backend>) is a string describing the service that will be accessed.
Backends are self-documenting. To access a backend's documentation, use
tt(lookup)'s var(-h) global-option as described below.

startitem()
item(tt(-h [backend]))(
Print a help message.

If tt([backend]) is defined, it will display the self-documentation of
the named backend.
)
item(tt(-i))(
(Re)initialize the lookup subsystem.

This is usually not required (unless you add new backends at runtime).
)
item(tt(-a <alias-definition>))(
Add a backend alias.

tt(<alias-definition>) has this format: var(alias-identifier=backend-name).
)
item(tt(-d <alias-identifier>))(
Remove the backend alias named tt(<alias-identifier>).
)
item(tt(-Q))(
Let a handler function create the QUERY string.

See var(Query Handlers) below.
)
item(tt(-q <argument>))(
same as tt(-Q), but let's you give an argument for the handler function,
too.
)
item(tt(-l))(
List available backends.
)
item(tt(-L))(
List defined backend aliases.
)
item(tt(-P))(
Print which browser command would be used instead of actually executing it.
)
item(tt(-R))(
Send url to remote (GUI) browser (like firefox).
)
enditem()

subsect(Quickstart)

This section is for people who do not want to setup the lookup system on
their own:

example(
zstyle ':lookup:*' txt-browser 'w3m'
zstyle ':lookup:*' txt-formats '%s'
zstyle ':lookup:*' gui-browser 'firefox'
zstyle ':lookup:*' gui-formats '-remote' 'openurl+LPAR()%s+RPAR()'
zstyle ':lookup:*' use-pager   true
zstyle ':lookup:*' pager-auto  true
zstyle ':lookup:*' pager       'less -M'
)

If you want to use other browsers, you'll figure it out form here.

Now to find out what backends there are, do:

example(lookup -l)

To get documentation for a backend do (the tt(gmane) backend here):

example(lookup -h gmane)

Feel free to use tt(lu) instead of tt(lookup) to avoid a lot of typing.
So, if you want to "google" for tt(zsh), do:

example(lu google zsh)

subsect(Configuration)

The var(lookup) feature is primarily configured via var(zstyle).
For additional convenience the user can define and remove aliases for
backends via the tt(-a) and tt(-d) options of the var(lookup) function
(see examples below).

The context used for zstyle is:
example(:lookup:<execution-ident>:<backend>:<local-part>)

startitem()
item(tt(<executing-ident>))(
Is an identifier for the code region a style is looked up. Valid strings
are: tt(-main-), tt(-backend-), tt(-queryhandler-), tt(-hook-) and
tt(-browser-). These are provided for maximum control of the context.
Usually using tt(*) for this field will be good enough.
)
item(tt(<backend>))(
Is the backend in question. Find out about valid strings via:
tt(lookup -l).
)
item(tt(<local-part>))(
Usually, this is set to var(-default-). Backends may set this to another
value, though (the var(rfc) backend does, for example). See the backend's
documentation for details.
)
enditem()

This is a description of all styles that are looked up by the main system
itself. Backends do look up other styles as well; they are described in
the backend's self-documentation.

startitem()
kindex(debug)
item(tt(debug))(
When set, var(lookup) will print some debugging information to stdout
and it only prints out what command if would run instead o actually running
it (the latter has the same effect as the tt(-P) option).
[Type: tt(boolean); Default: tt(false)]
)
kindex(txt-browser)
item(tt(txt-browser))(
This sets up the text based browser, which var(lookup) will call to access
a web service. [Type: tt(string); Default: tt($BROWSER), if that is unset:
tt(w3m)]
)
kindex(txt-formats)
item(tt(txt-formats))(
A list of arguments that is passed to the text based browser. Within these
arguments the string tt(%s) is replaced by the URL that the browser should
open. [Type: tt(string); Default: tt(%s)]
)
kindex(gui-browser)
item(tt(gui-browser))(
This is the "remote" GUI browser, which is called when the tt(-R) option of
var(lookup) is used. The default is the same as for the text based browser.

Thus, for making use of the tt(-R) option you will have to set up this style
and possibly the var(txt-formats) style (See below, and Examples).
[Type: tt(string); Default: var(see txt-browser)]
)
kindex(gui-formats)
item(tt(gui-formats))(
A list of arguments that is passed to the "remote" GUI browser. Within these
arguments the string tt(%s) is replaced by the URL that the browser should
open. [Type: tt(string); Default: var(see txt-formats)]
)
kindex(use-pager)
item(tt(use-pager))(
When displaying a backend's self-documentation, you may want to read that
text in a pager because the text may be too long for your terminal.

Setting this style will always put the help text into a pager (unless
var(pager-auto) is set, too). [Type: tt(boolean); Default: tt(false)]
)
kindex(pager-auto)
item(tt(pager-auto))(
If set, a pager is only used to display help-texts if the text would not
fit on the screen (see var(prompt-height) below). This has no effect
if var(use-pager) is not set to true. [Type: tt(boolean);
Default: tt(false)]
)
kindex(pager)
item(tt(pager))(
The pager to use for displaying help texts. [Type: tt(string);
Default: tt($PAGER), if that is unset: tt(more)]
)
kindex(prompt-height)
item(tt(prompt-height))(
This is the height of the prompt assumed when calculating whether to use
a pager when var(pager-auto) is set. [Type: tt(integer); Default: tt(1)]
)
kindex(query-handlers)
item(tt(query-handlers))(
A list of handlers, that may be used to alter (and possibly generate) a
query for a web service. See tt(Query Handlers) and tt(Examples) below.
[Type: tt(list); Default: tt(empty)]
)
kindex(hooks)
item(tt(hooks))(
A list of functions to run at a certain time. There is one hook type
directly before a backend is run; and one that is run directly after
a backend ran and a browser is to be spawned. (If a backend runs other
hooks, it will document those itself). See tt(Hooks) below.
[Type: tt(list); Default: tt(empty)]
)
enditem()

subsect(Query Handlers)

tt(Query Handlers) can be used to automate the generation and changing of
queries. Usually, after all option parsing is done, the remaining arguments
to a backend are copied into the tt(QUERY) variable, concatenating them by
single spaces.

This tt(QUERY) variable is a global parameter to the var(lookup) system,
so that you may change it in query handlers and the caller will used the
changed variable.

Such a handler itself is just a shell function named var(LOOKUP_qh_)tt(name),
where tt(name) is the name of the handler which you use in the
var(query-handlers) style.

The var(<execution-identifier>) part of the zstyle context used in such
handlers is var(-queryhandler-) (this is only important if you want to
make your handlers configurable by zstyle).

The tt(Examples) section below has an example of how to automate queries
using such a handler.

subsect(Hooks)

The basic lookup system (backends may run their own hooks, which they
will document themselves if they do) runs two hooks: One var(before) a
backend is run, the other var(after) a backend was run, var(before)
the browser is spawned.

The hook list for the former is looked up in the
var(:lookup:-main-:)tt(<backend>)var(:-default-) context, for the latter
in the var(:lookup:-browser-:)tt(<backend>)var(:-default-) context.

In contrast to query handlers the name of a hook in the zstyle list
is the same as the functions that is called. The following arguments are
provided to these functions: In the var(-main-) context: the same arguments
that are passed to the backend. In the var(-browser-) context: the same
URL that is handed over to the browser.

There is a special variable var(unencQUERY) that is available in hooks
in the var(-browser-) context. It contains the unencoded query string.
With that the var(-browser-) hooks can be used to set xterm or GNU screen
titles.

The var(<execution-identifier>) part of the zstyle context used in
hooks is var(-hook-) (this is only important if you want to make your
hooks configurable by zstyle).

subsect(Examples)

Basic calls:
example(lookup google zsh)
example(lookup deb_bts -p zsh)

Calls using the shorter tt(lu):
example(lu google zsh)
example(lu usenet zsh)

Example backend aliases:
example(lu -a s=google)
example(lu -a d=leo)
example(lu -a z=zsh_mla)

And use those aliases:
example(lu s zsh compsys)
example(lu d sugar)
example(lu z -w 12345)

Setup firefox as your "remote" GUI browser:
example(zstyle ':lookup:*' gui-browser 'firefox'
zstyle ':lookup:*' gui-formats '-remote' 'openurl+LPAR()%s+RPAR()')

Do the same for opera:
example(zstyle ':lookup:*' gui-browser 'opera'
zstyle ':lookup:*' gui-formats '-newtab' '-remote' 'openURL+LPAR()%s+RPAR()')

And finally an example for var(Query Handlers):

Let's assume, you have a command that queries your music player as to which
Song is currently playing, in one of the following formats:

example(Artist - Album - Track)
example(Artist - Track)

I happen to have such a program called tt(cmus-rstat.sh). If the player is
stopped is displays: tt([cmus]: -stopped-)

Now wouldn't it be convenient if we could use such information in order to
make queries with the tt(letssingit) backend (which queries
var(www.letssingit.com))? It would and the following does:

example(
zstyle ':lookup:*:letssingit:*' query-handlers letssingit
function LOOKUP_qh_letssingit+LPAR(+RPAR) {
    local mode=${lookup_communicate[mode]}
    local np
    case ${mode} in
    (artist|album|song)
        np="$(cmus-rstat.sh)"
        np=${np/np: /}
        if [[ ${np} == '[cmus]: -stopped-' ]] ; then
            printf '\n  Cmus is currently playing nothing!\n\n'
            return 3
        fi
        ;;
    esac
    case ${mode} in
    (artist)
        QUERY=${np%% - *}
        ;;
    (album)
        np=${np% - *}
        if [[ ${np} == *' - '* ]] ; then
            QUERY=${np#* - }
        else
            printf '\n Could not get album (%s)!\n\n' "$(cmus-rstat.sh)"
            return 3
        fi
        ;;
    (song)
        QUERY=${np##* - }
        ;;
    esac
    return 0
}
)

Now, to search for the lyrics of the currently running song, you can do
this:
example(lu -Q letssingit -m song)

You can use tt(-m artist) or tt(-m album) in order to search for lyrics
of the currently playing artist or album, too.


