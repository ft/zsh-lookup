### vim:ft=zsh:foldmethod=marker
##
## zsh function that looks up an argument in various webservices.
## Copyright: 2009, Frank Terbeck <ft@bewatermyfriend.org>
##
## This file, LOOKUP_browser and all backends in the Lookup/ subdirectory
## are distributed under the same licence as zsh itself (BSD-like).
##

# TODO: LOOKUP_encode() should be used throughout the system.
# TODO: Backends should be selfdocumenting.
# TODO: completions should be able to hide backends that got an alias, too.

typeset -ga LOOKUP_backends
typeset -gA LOOKUP_aliases

function lookup() {
    emulate -L zsh
    setopt extendedglob

    local file opt
    local -a opts
    local -A lu_aliases

    local -x backend lookup_describe
    local -ix lookup_remote lookup_printout

    if [[ -z $1 ]] ; then
        printf 'usage: lookup [-{l,s,R,P}] <backend> OPTION(s)...\n'
        printf '    -l  list available backends\n'
        printf '    -s  (re)initialize backend list\n'
        printf '    -P  print which browser command would be used\n'
        printf '    -R  send url to remote browser\n'
        return 0
    fi

    lookup_remote=0
    lookup_printout=0
    zparseopts -A opts -D l s P R
    if [[ $1 == -* ]] ; then
        printf 'Unknown option: %s\n' "$1"
        return 1
    fi
    for opt in ${(k)opts} ; do
        [[ -z ${opts[$opt]} ]] && opts[$opt]='yes'
    done

    if [[ -n ${opts[-l]} ]] ; then
        # list backends
        lookup_describe="yes"
        for backend in ${LOOKUP_backends} ; do
            printf '%16s - %s\n' ${backend} "$(LOOKUP_be_${backend})"
        done
        return 0
    fi
    if [[ -n ${opts[-s]} ]] ; then
        # reread backends list
        LOOKUP_backends=()

        for file in ${^fpath}/LOOKUP_be_*~*(\~|.zwc)(N.) ; do
            file=${file:t}
            : ${file:#(#b)LOOKUP_be_(*)}
            backend=${match[1]}

            [[ -n ${(M)LOOKUP_backends:#${backend}} ]] && continue
            LOOKUP_backends+=(${backend})
            autoload -Uz LOOKUP_be_${backend}
        done
        return 0
    fi
    [[ -n ${opts[-R]} ]] && lookup_remote=1
    [[ -n ${opts[-P]} ]] && lookup_printout=1

    backend=${${LOOKUP_aliases[$1]}:-$1}

    if [[ -z ${(M)LOOKUP_backends:#$backend} ]] ; then
        printf 'Unknown backend '\''%s'\''.\n' ${backend}
        return 1
    fi

    shift

    LOOKUP_be_${backend} "$@"

    return $?
}

function lu() {
    lookup "$@"
}

LOOKUP_encode() {
    emulate -L zsh
    setopt extendedglob
    local input

    input=( ${(s::)1} )
    printf '%s' ${(j::)input/(#b)([^A-Za-z0-9_.!~*\'\(\)+-])/%${(l:2::0:)$(([##16]#match))}}
}

function lalias() {
    emulate -L zsh
    local al

    if [[ $1 == '-d' ]] && [[ -n $2 ]] ; then
        unset "LOOKUP_aliases[$2]"
        return 0
    fi

    if [[ -z $1 ]] ; then
        printf 'Defined backend aliases:\n'
        for al in ${(k)LOOKUP_aliases}; do
            printf '%10s=%s\n' ${al} ${LOOKUP_aliases[$al]}
        done

        return 0
    fi

    if [[ -z $2 ]] || [[ $1 == '-h' ]] ; then
        printf 'usage: lalias [-{d,h}] [alias] [lookup-backend]\n'
        printf '  "lalias -d s" removes the backend alias named "s".\n'
        [[ $1 == '-h' ]] && return 0 || return 1
    fi

    LOOKUP_aliases[$1]="$2"
}


# initialize backend list
lookup -s
