### vim:ft=zsh:foldmethod=marker
##
## zsh function that looks up an argument in various webservices.
## Copyright: 2009, Frank Terbeck <ft@bewatermyfriend.org>
##
## This file, LOOKUP_browser, LOOKUP_encode and all backends in the Lookup/
## subdirectory are distributed under the same licence as zsh itself (BSD-like).
##

# TODO: Backends should be selfdocumenting.

typeset -ga LOOKUP_backends
typeset -gA LOOKUP_aliases

function lookup() {
    emulate -L zsh
    setopt extendedglob
    setopt warncreateglobal

    local file opt
    local -a opts
    local -A lu_aliases

    local -x backend lookup_describe lookup_qh_arg lsys
    local -ix lookup_remote lookup_printout lookup_use_qh
    local -Ax lookup_communicate

    lsys='-main-'
    lookup_qh_arg=''
    lookup_use_qh=0
    lookup_remote=0
    lookup_printout=0
    zparseopts -A opts -D a: d: q: i l L P Q R
    if [[ $1 == -* ]] ; then
        printf 'Unknown option: %s\n' "$1"
        return 1
    fi
    for opt in ${(k)opts} ; do
        [[ -z ${opts[$opt]} ]] && opts[$opt]='yes'
    done

    if [[ -n ${opts[-l]} ]] ; then
        printf 'Available backends:\n\n'
        lookup_describe="yes"
        for backend in ${LOOKUP_backends} ; do
            printf '%16s - %s\n' ${backend} "$(LOOKUP_be_${backend})"
        done
        printf '\n'
        return 0
    fi

    if [[ -n ${opts[-L]} ]] ; then
        if (( ${#LOOKUP_aliases} == 0 )) ; then
            printf 'lookup: No aliases defined.\n'
            return 0
        fi
        printf 'Defined backend aliases:\n\n'
        for al in ${(k)LOOKUP_aliases}; do
            printf '%16s=%s\n' ${al} ${LOOKUP_aliases[$al]}
        done
        printf '\n'
        return 0
    fi

    if [[ -n ${opts[-i]} ]] ; then
        local f
        local -a fcts

        LOOKUP_backends=()
        fcts=(LOOKUP_browser LOOKUP_browser)

        for file in ${^fpath}/LOOKUP_be_*~*(\~|.zwc)(N.) ; do
            file=${file:t}
            : ${file:#(#b)LOOKUP_be_(*)}
            backend=${match[1]}

            [[ -n ${(M)LOOKUP_backends:#${backend}} ]] && continue
            LOOKUP_backends+=(${backend})
            (( ${+functions[LOOKUP_be_$backend]} )) ||
                autoload -Uz LOOKUP_be_${backend}
        done

        for f in ${fcts} ; do
            (( ${+functions[$f]} )) || autoload -Uz $f
        done
        return 0
    fi

    if [[ -n ${opts[-a]} ]] ; then
        local al val

        : ${${opts[-a]}/(#b)(*)=(*)}
        al="${match[1]}"
        val="${match[2]}"

        LOOKUP_aliases[$al]="${val}"
        return 0
    fi

    if [[ -n ${opts[-d]} ]] ; then
        unset "LOOKUP_aliases[${opts[-d]}]"
        return 0
    fi

    [[ -n ${opts[-R]} ]] && lookup_remote=1
    [[ -n ${opts[-P]} ]] && lookup_printout=1
    [[ -n ${opts[-Q]} ]] && lookup_use_qh=1
    [[ -n ${opts[-q]} ]] && lookup_use_qh=1 && lookup_qh_arg=${opts[-q]}

    if [[ -z $1 ]] ; then
        printf 'usage: lookup [-{i,a,d,Q,l,L,P,R}] [-q <arg>] <backend> OPTION(s)...\n'
        printf '    -i          (re)initialize lookup\n\n'
        printf '    -a          add a backend alias\n'
        printf '    -d          remove an alias for a backend\n\n'
        printf '    -Q          let a handler create the QUERY string\n'
        printf '    -q <arg>    same as -Q, but let'\''s you give an argument, too\n\n'
        printf '    -l          list available backends\n'
        printf '    -L          list defined backend aliases\n\n'
        printf '    -P          print which browser command would be used\n'
        printf '    -R          send url to remote browser\n'
        return 0
    fi

    backend=${${LOOKUP_aliases[$1]}:-$1}

    if [[ -z ${(M)LOOKUP_backends:#$backend} ]] ; then
        printf 'Unknown backend '\''%s'\''.\n' ${backend}
        return 1
    fi

    shift

    lsys='-backend-'
    LOOKUP_be_${backend} "$@"
    return $?
}

function lu() {
    lookup "$@"
}

# initialize the system
lookup -i
